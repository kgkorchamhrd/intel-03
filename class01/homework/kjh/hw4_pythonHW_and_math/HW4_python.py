# -*- coding: utf-8 -*-
"""python_example.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j8hDY6S4YRC-HSn0ynVCKcc5UW_wNqKQ

#실습1

1. 튜플형 데이터 (A, B)를 만들고 C를 추가한다.

튜블를 쓰는 경우 :
데이터의 경우 A는 이미지, B는 클래스
"""

A = ('A', 'B',)
B = ('C',)
C = A + B
print(C)

"""#실습2
1. 정수 n을 입력받아 n x n 크기의 숫자 사각형을 출력.
"""

import numpy as np
n = int(input())
A = np.zeros((n,n))

for i in range(n):
    for j in range(n):

      A[i,j] = n*i +j
print(A)

"""#실습3
1. 실습 2에서 수행한 결과를 reshape을 이용해서 1차원 형태로 변환한다.
"""

B = A.reshape(-1,)
print(B)

"""#실습4"""

import cv2

# 1.
fram = cv2.imread('./lena.png', cv2.COLOR_BGR2RGB)

# 2.
frame = fram/255 # normalize
print('lena shape :', frame.shape)

frame2 = np.expand_dims(frame, axis=0)

# 3.
# 프레임워크마다 channel 위치가 다를 수 있다
frame3 = frame2.transpose((0,3,1,2))
print('lena shape :', frame3.shape)

"""# 실습5
붉은색 네모 박스를 직접 구현.
"""

img = cv2.imread('./lena.png', cv2.cv2.IMREAD_GRAYSCALE)
kernel = np.array([[1, 1, 1], [1, -8, 1], [1, 1, 1]])
print(kernel)
output = cv2.filter2D(img, -1, kernel)
cv2.imshow('lena', output)
cv2.waitKey(0)

"""#numpy 기본 실습


"""

# L1, L2 norm
import numpy as np
from numpy import linalg as LA
c = np.array([[1, 2, 3],
              [-1, 1, 4]])
print(LA.norm(c, axis=0))
print(LA.norm(c, axis=1))
print(LA.norm(c, ord=1, axis=1))
print(LA.norm(c, ord=2, axis=1))

a = np.array([[1], [2], [3], [4]])
print(a)
print(a.T)
print(a.T.reshape(-1,4))
print(a.shape)
print(a.T.reshape(-1,4).T.shape)

# Numpy matrix 실습
# @이랑 *이가 달라서 확인후 사용
A = np.array([[1, 4, 2, 0], [9, 5, 0, 0], [4, 0, 2, 4], [6, 1, 8, 3]])
x = np.array([1,2,3,4])
b = np.array([0,0,0,0])
n = 4
for i in range(0, n):
  val = 0.0
  for j in range(0, n):
    # TODO 2
    val += A[i,j] * x[j]
  b[i] = val

print("calculate", b)

b = np.matmul(A,x)
print("matmul=",b)

b = A@x
print("A@x=", b)

b = A*x
print("A*x=",b)

# 역행렬
# 역행렬 det이 없을때 구하는 방법
import numpy as np
A = np.array([[1, 4, 2, 0], [9, 5, 0, 0], [4, 0, 2, 4], [6, 1, 8, 3]])
b = np.array([15,19,26,44])

print('det=', np.linalg.det(A))

x = np.linalg.solve(A, b)
print('solver =', x)

x = np.dot(np.linalg.inv(A), b)
print('inverse1 =', x)

tmp_b = np.dot(A.T, b)
tmp_T = np.dot(A.T, A)
tmp_inv = np.linalg.inv(np.dot(A.T, A))
x = np.dot(tmp_inv, tmp_b)
print('inverse2 =', x)

