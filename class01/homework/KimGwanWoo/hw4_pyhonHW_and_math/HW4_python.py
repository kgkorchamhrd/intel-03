# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aLuNShpSpsbPX84SsSpKtINWDoqljR7F
"""

#튜플형 데이터 (A, B)를 만들고 C를 추가한다.

t1 = ('A', 'B')
t1 = t1+('C',)

t1

#정수 n을 입력받아 n x n 크기의 숫자 사각형을 출력.

n = int(input())


for i in range(n*n):

  if i%n == n-1:
    print(i+1)
  else:
    print(i+1, end=' ')

#실습 2에서 수행한 결과를 reshape을 이용해서 1차원 형태로 변환한다.

import numpy as np

x = np.arange(n*n)+1
x = x.reshape(n,n)

x

y = x.reshape(-1,)
y

# 1. 임의의 이미지 파일을 불러온다.
# 2. Numpy의 expend_dims를 사용해서 이미지 파일의 차원을 하나
# 더 늘려 (Height, Width, Channel)을 (Batch, Height, Width,
# Channel)로 확장한다. (이미지 출력 불필요)
# 3. Numpy의 transpose를 이용해서 차원의 순서를 (Batch, Width,
# Height, Channel)에서 (Batch, channel, width, height) 로 변경한다.
# (이미지 출력 불필요)
# 해당 결과는 imge.shape를 통해 결과를 확인한다.



from PIL import Image
import numpy as np


# 이미지 열기
imge = Image.open("img1.jpg")

#차원추가
testimg_resized = np.expand_dims(imge, axis=0)
print(testimg_resized.shape)


#차원순서 변환
t = testimg_resized.transpose(0,3,1,2)
print(t.shape)





#강사 답지

import cv2

frame = cv2.imread('img1.jpg',cv2.COLOR_BGR2RGB)


frame = frame/255
print("lena shape: ",frame.shape)
frame2 = np.expand_dims(frame, axis=0)
print("lena shape: ",frame2.shape)
frame3 = frame2.transpose(0,3,1,2)
print("lena shape: ",frame3.shape)

import cv2
import numpy as np
from google.colab.patches import cv2_imshow

# 이미지 불러오기
img = cv2.imread('img1.jpg', cv2.IMREAD_GRAYSCALE)

# 엣지 검출 커널 적용
kernel = np.array([[1, 1, 1], [1, -8, 1], [1, 1, 1]])



#직접구현
#output = cv2.filter2D(img, -1, kernel)


def my_filter2D(img, kel):

  k_h, k_w = kernel.shape
  pad_h, pad_w = k_h // 2, k_w // 2
  img_h, img_w = img.shape

  output = np.zeros((img_h, img_w), dtype=np.uint8)

  img = cv2.copyMakeBorder(img, pad_h, pad_h, pad_w, pad_w, cv2.BORDER_REPLICATE)
  for i in range(img_h):
    for j in range(img_w):
      output[i, j] = np.sum(img[i:i+k_h, j:j+k_w] * kernel)


  return output.astype(np.uint8)


output = my_filter2D(img, kernel);


# 결과 출력
cv2_imshow(output)

#Norm

import numpy as np
from numpy import linalg as LA

c = np.array([[1,2,3],
              [-1,1,4]])
print(LA.norm(c, axis=0))
print(LA.norm(c, axis=1))

print(LA.norm(c, ord=1,axis=1))
print(LA.norm(c, ord=2,axis=1))

image_filename = dounload_file()

imamge = cv2.imread(str(image_filename))

rgb_image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
image_h, image_w, _ = rgb_image.shape

N,C,H,W = input_layer_ir.shape
resized_image = cv2_resize(image,(W,H))

input_image = np.expand_dims(resized_image.transpose(2,0,1),0)

plt.imshow(input_image[0])

#Numpy matrix 실습
A= np.array([[1,4,2,0],[9,5,0,0],[4,0,2,4],[6,1,8,3]])
x = np.array([1,2,3,4])
b= np.array([0,0,0,0])
n=4

for i in range(0,n):
  val =0.0
  for j in range(0,n):
    val+=A[i,j]*x[j]
  b[i] = val

print("calculate=",b)

b = np.dot(A,x)
print("dot=",b)

b = np.matmul(A,x)
print("matmul=",b)

b = A@x
print("A@X=",b)

b = A*x
print("A*x=",b)

import numpy as np
A = np.array([1,4,2,0],[9,5,0,0],[4,0,2,4],[6,1,8,3])
b= np.array([16,19,26,44])

print ("det=",np.lialg.det(A))

x = np.linalg.solve(A,b)
print("solver = ",x)