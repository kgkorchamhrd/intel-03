# -*- coding: utf-8 -*-
"""Untitled21.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RXkZgcfHr58Z4r2ATn21_NtvyM9Yw689
"""

import cv2
import numpy as np
import matplotlib.pyplot as plt

def apply_convolution(image, kernel):
    """
    컨볼루션 적용 함수
    :param image: 입력 이미지
    :param kernel: 적용할 커널
    :return: 필터 적용 이미지
    """
    # 필터 적용 전 이미지 자료형을 float32로 변환
    image = image.astype(np.float32)

    # 필터 적용
    filtered = cv2.filter2D(image, -1, kernel)

    # 필터 적용 후 uint8로 변환
    filtered = np.clip(filtered, 0, 255).astype(np.uint8)

    return filtered

# 커널 정의
kernels = {
    "Identity": np.array([[0, 0, 0], [0, 1, 0], [0, 0, 0]], dtype=np.float32),
    "Ridge or Edge Detection": np.array([[-1, -1, -1], [-1, 8, -1], [-1, -1, -1]], dtype=np.float32),
    "Sharpen": np.array([[0, -1, 0], [-1, 5, -1], [0, -1, 0]], dtype=np.float32),
    "Box Blur": np.ones((3, 3), dtype=np.float32) / 9.0,
    "Gaussian Blur 3x3": np.array([[1, 2, 1], [2, 4, 2], [1, 2, 1]], dtype=np.float32) / 16.0,
    "Gaussian Blur 5x5": np.array([[1, 4, 6, 4, 1], [4, 16, 24, 16, 4], [6, 24, 36, 24, 6], [4, 16, 24, 16, 4], [1, 4, 6, 4, 1]], dtype=np.float32) / 256.0,
    "Unsharp Masking 5x5": np.array([[-1, -4, -6, -4, -1], [-4, -16, -24, -16, -4], [-6, -24, 476, -24, -6], [-4, -16, -24, -16, -4], [-1, -4, -6, -4, -1]], dtype=np.float32) / 256.0
}

# 이미지 불러오기
image = cv2.imread("doge.jpg")  # 사용할 이미지 파일명을 doge.jpg로 변경
if image is None:
    raise ValueError("이미지를 찾을 수 없습니다! 파일 경로를 확인하세요.")

processed_images = []

# 필터 적용 및 이미지 출력
for title, kernel in kernels.items():
    processed_image = apply_convolution(image, kernel)
    processed_images.append(processed_image)

    # 커널 값을 이미지 내부 오른쪽 하단에 3x3 또는 5x5 형태로 출력 (파란색 글씨, 소수점 유지)
    kernel_text = "{"
    for i in range(kernel.shape[0]):
        row_text = " ".join([f"{kernel[i, j]:.2f}" if kernel[i, j] % 1 != 0 else f"{int(kernel[i, j])}" for j in range(kernel.shape[1])])
        kernel_text += row_text + ("\n" if i < kernel.shape[0] - 1 else "")
    kernel_text += "}"

    y_offset = processed_image.shape[0] - (kernel.shape[0] * 30) - 20  # 이미지 하단에 배치
    x_offset = processed_image.shape[1] - (kernel.shape[1] * 50) - 20  # 이미지 오른쪽에 배치
    for i, line in enumerate(kernel_text.split("\n")):
        cv2.putText(processed_image, line,
                    (x_offset, y_offset + i * 30),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 0, 0), 2, cv2.LINE_AA)  # 파란색 텍스트

    # 필터 적용된 이미지 출력
    plt.figure(figsize=(5, 5))
    plt.imshow(cv2.cvtColor(processed_image, cv2.COLOR_BGR2RGB))
    plt.title(title)
    plt.axis("off")
    plt.show()

# 모든 필터 적용된 이미지를 하나의 파일로 저장
output_image = np.vstack(processed_images)  # 이미지들을 세로로 연결
cv2.imwrite("output_combined.jpg", output_image)