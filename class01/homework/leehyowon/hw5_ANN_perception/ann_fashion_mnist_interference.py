# -*- coding: utf-8 -*-
"""ANN_fashion_mnist_interference.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IjB6oqgla4-uXd4MxOSyJtWdQUbsPn-6
"""

import tensorflow as tf
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.models import Sequential

# Load the Fashion MNIST dataset
fashion_mnist = tf.keras.datasets.fashion_mnist
(f_image_train, f_label_train), (f_image_test, f_label_test) = fashion_mnist.load_data()

# Normalize pixel values to the range [0, 1]
f_image_train, f_image_test = f_image_train / 255.0, f_image_test / 255.0

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

plt.figure(figsize=(10, 10))
for i in range(10):
    plt.subplot(3, 4, i + 1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(f_image_train[i])
    plt.xlabel(class_names[f_label_train[i]])
plt.show()

# ANN
model = Sequential()
model.add(tf.keras.layers.Flatten(input_shape=(28, 28))) # Add input shape for Flatten layer
model.add(tf.keras.layers.Dense(128, activation='relu'))
model.add(tf.keras.layers.Dense(64, activation='relu'))
model.add(tf.keras.layers.Dense(10, activation='softmax'))

# Compile the model (once is enough)
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

# Train the model using the loaded training data
model.fit(f_image_train, f_label_train, epochs=10, batch_size=10) # Changed the incorrect variables here.
model.summary()
model.save('fashion_mnist.h5')

import tensorflow as tf
import numpy as np
import matplotlib.pyplot as plt

# 저장된 모델 로드
model = tf.keras.models.load_model('fashion_mnist.h5')

# Fashion MNIST 데이터 로드 (테스트 데이터만 사용)
_, (f_image_test, f_label_test) = tf.keras.datasets.fashion_mnist.load_data()

# 데이터 정규화 (0~1 범위)
f_image_test = f_image_test / 255.0

# 클래스 이름 리스트
class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

# 테스트 이미지 하나 선택 (예: 첫 번째 이미지)
test_index = 0  # 원하는 인덱스로 변경 가능
test_image = np.expand_dims(f_image_test[test_index], axis=0)  # 배치 차원 추가

# 모델로 예측 수행
predictions = model.predict(test_image)
predicted_label = np.argmax(predictions)  # 가장 높은 확률을 가진 클래스 선택

# 예측 결과 출력
plt.imshow(f_image_test[test_index], cmap=plt.cm.binary)
plt.title(f"Predicted: {class_names[predicted_label]}\nActual: {class_names[f_label_test[test_index]]}")
plt.xticks([])
plt.yticks([])
plt.show()

# 예측된 클래스 확률 출력
print("Predicted Probabilities:")
for i, prob in enumerate(predictions[0]):
    print(f"{class_names[i]}: {prob:.4f}")